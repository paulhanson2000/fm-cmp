---
format: html
toc: true
---

# Lib
```{r}
#| output: false
library(data.table)
library(SeqArray)
library(SNPRelate)
```
```{r}
#| include: false
"%ni%" <- Negate("%in%")
```

# Data
```{r}
data_configs <- fread("data.config")
loci_configs <- fread("locus.config") # REMINDER TO SELF: you're designing it this way instead of just running the script multiple times for each locus b/c then would be loading data multiple times.
```
## Summary stats
```{r}
#| output: false
# TODO: Read only the parts of sumstats that are needed. I.e. Read only within the chr and pos ranges, AND eaf, compute from that what rows are necessary to read, and only read those. Small memory+timesave but as I only have 3 small-ish datasets for now, focus on optimizations elsewhere.
  # Alternatively use cmd="awk <stuff>", but that would hurt Windows compatability.
  # NOTE TO SELF: peace of mind: this optimization will require no rewriting of the downstream code after it's implemented, because seqSetFilterChrom() and rsids %in% later takes care of it.
    # If you added that extra line filtering out EAF == 0, then yeah that one line could be removed after this optim is done though. BUT actually, keep it for clarity, even if it's repeated.
sumstats <- lapply(1:nrow(data_configs), function(r) {
  sumstat          <-       data_configs[r, fread(filepath, select=c(chr_col, pos_col, rsid_col, other_allele_col, effect_allele_col, eaf_col, b_col, se_col, z_col, p_col))]
  unspecified_cols <- is.na(data_configs[r,                        .(chr_col, pos_col, rsid_col, other_allele_col, effect_allele_col, eaf_col, b_col, se_col, z_col, p_col)])
  setnames(sumstat,                                               c("chr",   "pos",   "rsid",   "a0",             "a1",              "eaf",   "b",   "se",   "z",   "p"   )[!unspecified_cols])
  # TODO: remove rows with un-ignorable NAs in via complete.cases. Be verbse about what is rm'd.
  sumstat[, `:=`(a0=toupper(a0), a1=toupper(a1))]
  if(data_configs[r, is.na(z_col) & !is.na(b_col) & !is.na(se_col)]) sumstat[, z := b/se]
  # TODO: s/t s/t complete.cases or w/e to deal w/ remaining NAs, stop if one of the datasets is invalid, b/c surely the user wouldn't want it to run a/w, and it would help the code be cleaner if I could assume all datasets are valid.
  # TODO: Ano/ thing to check is that a dataset's ancestry exists in the reference panel.
})
names(sumstats) <- basename(data_configs$filepath)
```
## Reference panel
```{r}
#| output: false
# TODO: Hardcoded to use 1kG for now. Possibly support TOPMed later.
ref <- seqOpen("../data/ref/1kg/gds_format/1KG_ALL.autosomes.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.gds", readonly=F, allow.duplicate=T)

# TODO: Move to a pre-process script and perform on a COPY of the data and store s/where. Annoying, but the "data/" dir should really remain untouched. Should be able to look in there and take md5sums and be confident e/t in there is raw.
sample_info <- fread("../data/ref/1kg/sample_info/integrated_call_samples_v3.20130502.ALL.panel")
identical(seqGetData(ref,"sample.id"), sample_info$sample)
seqAddValue(ref, "sample.annotation/ancestry", sample_info$super_pop, replace=T)
seqAddValue(ref, "sample.annotation/gender", sample_info$gender, replace=T)
rm(sample_info)
```

# Prep
## Filter
First, filter out useless/unusable variants from the summary stats: \
1. If variant's EAF is 0 
2. If variant's ancestry-specific MAF is 0 for that sumstat file's ancestry
3. If variant is not within the bounds of any loci specified in `locus.config`
4. If variant not also present in reference panel
```{r}
#| output: false
seqSetFilterChrom(ref, loci_configs$chr,
               from.bp=loci_configs$pos_min,
                 to.bp=loci_configs$pos_max)

samples_of_each_ancestry <- tapply(seqGetData(ref,"sample.id"), INDEX=seqGetData(ref,"sample.annotation/ancestry"), FUN = identity) 
ancestry_MAFs <- lapply(samples_of_each_ancestry, function(samples_of_an_ancestry) {
    seqSetFilter(ref, sample.id = samples_of_an_ancestry)
    seqAlleleFreq(ref, minor=T)
}) 
seqResetFilter(ref, variant=F)

invisible(sapply(data_configs$ancestry, function(anc) if(anc %ni% names(ancestry_MAFs)) { print(paste("ERROR: Ancestry",anc,"mentioned in data.config is not an ancestry in the reference panel:", paste(collapse=", ", names(ancestry_AFs)), "\nPlease remove this dataset from data.config, or if this was just a typo, change the ancestry name to match one of those in the reference panel.")); stop() })) # TODO: this belongs earlier, when loading in the data. But a nice sanity check to have for now.

# For each sumstat, keep only variants with MAF > 0 for the sumstat's ancestry.
# Reference panel used to calculate MAF.
# As a byproduct, also filters sumstats by variants shared with the reference.
sumstats <- mapply(sumstats, data_configs$ancestry, SIMPLIFY=F,
  FUN = function(s, anc) {
    ancestry_MAF <- ancestry_MAFs[[anc]]
    seqSetFilter(ref, action = "push+intersect", variant.sel = ancestry_MAF>0)
    s <- s[rsid %in% seqGetData(ref,"annotation/id")]
    #print(sapply(seetFilter(ref),sum))
    seqFilterPop(ref)
    #print(sapply(seqGetFilter(ref),sum))
    s
})

# TODO: Not generalizable to sumstats where user gives no EAF column.
  # Also just filter by EAF during data loading. But this may be good to keep for explicitness as it surely has negligible performance cost at this point after filtering
sumstats <- lapply(sumstats, '[', eaf>0 & eaf<1)
sumstats <- lapply(sumstats, '[', order(rsid)) # Note that after subsetting, things will remain sorted (useful fact).
```

## Subset
Split the summary stats into sets of subsets, one per locus.
```{r}
subset_sumstatss <- lapply(1:nrow(loci_configs), function(r) {
                    lapply(         sumstats,    function(s) {

  s[chr == loci_configs[r,chr]     &
    pos >  loci_configs[r,pos_min] &
    pos <  loci_configs[r,pos_max] ]
})})
names(subset_sumstatss) <- loci_configs$locus
```

# LD
Calculate LD per ancestry per locus.\
This is more space-efficient than calculating LD per dataset per locus, assuming the datasets have most of their variants in common (which they should!—or else what is the point of multi-dataset finemapping?).
```{r}
# TODO: consider: generating subsets of sumstats and holding them all in memory? Or just holding the rsids necessary to subset each sumstat _later on_?
  # Could actualy be more concise to have just the rsids and subset as I go.

# Signed Pearson correlation.
# Returned LD matrix's rows/cols are sorted to match the order of the given rs_ids.
# Filters on the GDS file ~are~ taken into account. The GDS file will be returned with the same filters as before.
ld_calc <- function(gds_file, rs_ids, sample_ids=NULL, ref_alleles=NULL, outfile_name=NULL, n_threads=parallel::detectCores()) {
  if(is.null(ref_alleles)) warning("calc_ld() warning: specifying your data's ref_alleles is highly recommended! If the reference alleles (i.e. non-effect alleles) in your data =/= those in the reference panel, the LD will be incorrect.")
  seqFilterPush(gds_file) # Save user's prexisting filter on the file if they have one

  seqSetFilterAnnotID(gds_file, rs_ids)
  if(!is.null(sample_ids)) seqSetFilter(gds_file, sample.id = sample_ids, action="intersect")

  tmp_filename <- "/tmp/snpgds_format_file3.gds"
  seqGDS2SNP(gds_file, tmp_filename, compress.geno="", compress.annotation="")
  tmp <- snpgdsOpen(tmp_filename, readonly=F)
  #print(paste(identical(read.gdsn(index.gdsn(tmp,"snp.rs.id")), seqGetData(gds_file,"annotation/id")))) # TRUE

  # Sort user-given ref_alleles to match the order of the GDS file before allele switching!
  # Why not sort the GDS file to match user input instead? B/c raw data files should not be edited.
  ref_alleles <- ref_alleles[match(seqGetData(gds_file,"annotation/id"), rs_ids)]
  snpgdsAlleleSwitch(tmp, toupper(ref_alleles))
  ld <- snpgdsLDMat(tmp, slide=0, method="corr", num.thread=n_threads)$LD

  snpgdsClose(tmp) # Don't need SNP GDS format file anymore
  unlink(tmp_filename)

  # Sort LD matrix to match the order of the user-given rs_ids.
  rs_ids_order <- match(rs_ids, seqGetData(gds_file,"annotation/id"))
  ld <- ld[rs_ids_order, rs_ids_order]

  if(!is.null(outfile_name)) {
    if(!dir.exists(dirname(outfile_name))) dir.create(dirname(outfile_name), recursive=T)
    fwrite(ld, outfile_name, sep=' ', col.names=F, compress="gzip")
  }

  seqFilterPop(gds_file) # Set filter to however it was before
  ld
}
# Note: it doesn't (and shouldn't!) matter that the seqSetFilterChrom filter from before is still active.

ld_rsid_orders <-
  lapply(       loci_configs$locus,     function(l) {
  lapply(unique(data_configs$ancestry), function(anc) {
    samples_of_an_ancestry <- samples_of_each_ancestry[[anc]]
    sumstats_of_an_ancestry <- subset_sumstatss[[l]][which(data_configs$ancestry == anc)]
    common_rsids_in_sumstats_of_an_ancestry <- Reduce(union, lapply(sumstats_of_an_ancestry, '[', j=rsid))

    # TODO: not generalizable if multiple datasets in an ancestry with different rsids and/or different effect alleles.
      # Simple solution would be in data pre-proc: just flip alleles & β & z & etc..
    # For now w/ just the DIAMANTE data w/ one dataset per ancestry it's fine. Even the different ancestries have matching a0/a1, I checked.
    a_sumstat_of_an_ancestry <- sumstats_of_an_ancestry[[1]][rsid %in% common_rsids_in_sumstats_of_an_ancestry]
    #print(paste(identical(a_sumstat_of_an_ancestry$rsid, common_rsids_in_sumstats_of_an_ancestry)))
    ref_alleles <- a_sumstat_of_an_ancestry$a0

    ld_calc(ref, rs_ids = common_rsids_in_sumstats_of_an_ancestry,
             sample_ids = samples_of_an_ancestry,
            ref_alleles = ref_alleles,
           outfile_name = paste0("in/ld/",l,"-",anc,".ld.gz")       ) 
  
    common_rsids_in_sumstats_of_an_ancestry # Return the order of the LD mat's rows/cols, important!
})})
names(ld_rsid_orders) <- loci_configs$locus

save(ld_rsid_orders, file="in/ld/ld_rsid_orders.RData")
```

# Run Fine-Mapping Methods
## SuSiEx
### Prep Input
SuSiEx is a command-line python program. It expects the following:\
A summary stats file, as follows:\ 
TODO: make nice table\
The β column _must_ be named "BETA" or "OR", but besides that they may be named arbitrarily.
```{r}
if(!dir.exists("in/susiex")) dir.create("in/susiex")
# TODO: ensure data contains the required columns
lapply(loci_configs$locus, function(l) {
mapply(subset_sumstatss[[l]], names(sumstats), FUN=function(s, nm) {
  s <- s[, .(chr,pos,rsid,a0,a1,b,se,p)]
  setnames(s, old="b", new="BETA", skip_absent=T)
  fwrite(s, paste0("in/susiex/",l,"-",nm), sep=' ') # TODO: hardcoded for my data. Really easy to not hardcode. Just trying to think of elegant names for user's input data files. But might be impossible.
})})
```

```{r}
# TODO: PLINK stuff :(
  # NOTE TO SELF: see daily note 230605. Letting SuSiEx recompute its own LD for now just to get things working.
```

### Run SuSiEx
```{r}
if(!dir.exists("out/susiex")) dir.create("out/susiex", recursive=T)
lapply(1:nrow(loci_configs), function(r) {
  system(paste("python3 ../third_party/SuSiEx/SuSiEx.py",
               "--sst_file", paste(collapse=',', paste0("in/susiex/",loci_configs[r,locus],"-",names(sumstats))),
               "--n_gwas",   paste(collapse=',', data_configs$n),
               "--ld_file",  paste(collapse=',', paste0("in/ld/",data_configs$ancestry,"-susiex")), # TODO: hardcoded for my one-ancestry-per-dataset data. Also, not adding locus to the name was not a mistake, it is to reduce disk usage for now before I move to project folder
               "--ref_file ../data/ref/1kg/plink_format/eas/g1000_eas,../data/ref/1kg/plink_format/eur/g1000_eur,../data/ref/1kg/plink_format/sas/g1000_sas", # TODO:
               "--plink plink", # TODO:
               "--out_dir out/susiex/",
               "--out_name", loci_configs[r,locus], # TODO:
               "--chr ", loci_configs[r,chr],
               "--bp ", paste(sep=',', loci_configs[r,pos_min], loci_configs[r,pos_max]),
               "--chr_col", paste(collapse=',', rep(1,nrow(data_configs))),
               "--bp_col",  paste(collapse=',', rep(2,nrow(data_configs))),
               "--snp_col", paste(collapse=',', rep(3,nrow(data_configs))),
               "--a1_col",  paste(collapse=',', rep(4,nrow(data_configs))),
               "--a2_col",  paste(collapse=',', rep(5,nrow(data_configs))),
               "--eff_col", paste(collapse=',', rep(6,nrow(data_configs))),
               "--se_col",  paste(collapse=',', rep(7,nrow(data_configs))),
               "--pval_col",paste(collapse=',', rep(8,nrow(data_configs))),
               "--maf 0.005", # Default. TODO: if set to 0, crashes—why?
               "--mult-step True",
               "--keep-ambig True",
               "--full_out True"
               # defaults: --max_iter=100, --pval_thresh=1e-5, --tol=1e-4, --n_sig=5, --level=95%, --min_purity=0.5
  ))
})
```

## PAINTOR
### Prep Input
PAINTOR only works on variants shared by ALL input datasets.\
TODO: desc
```{r}
if(!dir.exists("in/paintor")) dir.create("in/paintor")
# input.files
writeLines(loci_configs$locus, "in/paintor/input.files")

# Locus files. Format:
# rsid  pop1_z  pop2_z ...
#  rs1   -3.14  -1.337
#  ... <no NAs allowed>
desired_rsidss <- sapply(loci_configs$locus, simplify=F, function(l) {
                           signif_rsids <- Reduce(union,     lapply(subset_sumstatss[[l]], '[', j=rsid)) # TODO: p threshold here
  common_rsids <- Reduce(intersect, lapply(subset_sumstatss[[l]], '[',           j=rsid))
  desired_rsids <- intersect(signif_rsids, common_rsids)
})

lapply(loci_configs$locus, function(l) {
  desired_rsids <- desired_rsidss[[l]]
  desired_sumstats <- lapply(subset_sumstatss[[l]], function(s) s[rsid %in% desired_rsids]) # We sorted before, so all sumstats' rsids are in the same order even after subsetting. 

  paintor_locus_file <- Reduce(cbind, lapply(desired_sumstats, '[', j=z), desired_rsids) # Can add more metadata than just rsid if you want
  colnames(paintor_locus_file) <- c("rsid", paste0(names(sumstats),"_z"))
  fwrite(paintor_locus_file, paste0("in/paintor/",l), sep=' ')
})

# LD files. Format: Pearson r, space-delim'd, no header, Must have same number of rows and order as locus file.
lapply(loci_configs$locus, function(l) {
  desired_rsids <- desired_rsidss[[l]]
  ld_filenames <- paste0("in/ld/",l,"-",unique(data_configs$ancestry),".ld.gz")
  desired_filenames <- paste0("in/paintor/",l,".ld_",unique(data_configs$ancestry))
  lds <- lapply(ld_filenames, function(f) as.matrix(fread(f)))
  mapply(lds, ld_rsid_orders[[l]], desired_filenames, SIMPLIFY=F, FUN = function(ld, ld_rsid_order, nm) {
    # return(c(length(ld_rsid_order),length(desired_rsids), sum(ld_rsid_order %in% desired_rsids)))
    # TODO: This code could definitely be made clearer.
    desired_subset <- ld_rsid_order %in% desired_rsids # TODO: rename ld_rsid_order variable to not "order". Because it's just rsids.
    ld <- ld[desired_subset, desired_subset]
    ld_rsid_order <- ld_rsid_order[desired_subset]

    desired_order <- match(desired_rsids, ld_rsid_order)
    ld <- ld[desired_order,desired_order]

    fwrite(ld, nm, sep=' ', col.names=F)
  })
}) # TODO: A more elegant way? Unfortunately PAINTOR insists having all its input files in a single dir, so that means either cluttering in/ld/, changing filesnames in in/ld/ to use weird naming conventions, or making copies.... And PAINTOR doesn't accept compression so copies it is I guess....
# AND it wants to take in all loci at once, which means you have to store ALL the (decompressed!) LD files at once w/o being able to delete them as you go.

# Annotation files. Format:
# annot1  annot2 ...
# 0 or 1  0 or 1 
# Must have same number of rows and order as locus file.
# TODO: dummy all-0s file for now
lapply(loci_configs$locus, function(l) {
  desired_rsids <- desired_rsidss[[l]]
  writeLines(c("dummy_annot", rep(0,length(desired_rsids))),
             paste0("in/paintor/",l,".annotations"))
})
```

### Run PAINTOR
```{r}
if(!dir.exists("out/paintor")) dir.create("out/paintor", recursive=T)
system(paste("../third_party/PAINTOR_V3.0/PAINTOR",
               "-input in/paintor/input.files",
               "-in in/paintor/",
               "-out out/paintor/",
               "-Zhead",  paste(collapse=',', paste0(names(sumstats),"_z")),
               "-LDname", paste(collapse=',', paste0("ld_",data_configs$ancestry)),
               "-annotations dummy_annot",
               "-enumerate 1"
))
```
